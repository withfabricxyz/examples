/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Shared {
  export type InitParamsStruct = {
    name: string;
    symbol: string;
    contractUri: string;
    tokenUri: string;
    owner: string;
    tokensPerSecond: BigNumberish;
    minimumPurchaseSeconds: BigNumberish;
    rewardBps: BigNumberish;
    numRewardHalvings: BigNumberish;
    feeBps: BigNumberish;
    feeRecipient: string;
    erc20TokenAddr: string;
  };

  export type InitParamsStructOutput = [
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    number,
    number,
    number,
    string,
    string
  ] & {
    name: string;
    symbol: string;
    contractUri: string;
    tokenUri: string;
    owner: string;
    tokensPerSecond: BigNumber;
    minimumPurchaseSeconds: BigNumber;
    rewardBps: number;
    numRewardHalvings: number;
    feeBps: number;
    feeRecipient: string;
    erc20TokenAddr: string;
  };
}

export interface SubscriptionTokenV1Interface extends utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseTokenURI()": FunctionFragment;
    "canRefund(address[])": FunctionFragment;
    "contractURI()": FunctionFragment;
    "createReferralCode(uint256,uint16)": FunctionFragment;
    "creatorBalance()": FunctionFragment;
    "deleteReferralCode(uint256)": FunctionFragment;
    "erc20Address()": FunctionFragment;
    "feeBalance()": FunctionFragment;
    "feeSchedule()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "grantTime(address[],uint256)": FunctionFragment;
    "initialize((string,string,string,string,address,uint256,uint256,uint16,uint8,uint16,address,address))": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "minPurchaseSeconds()": FunctionFragment;
    "mint(uint256)": FunctionFragment;
    "mintFor(address,uint256)": FunctionFragment;
    "mintWithReferral(uint256,uint256,address)": FunctionFragment;
    "mintWithReferralFor(address,uint256,uint256,address)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "reconcileERC20Balance()": FunctionFragment;
    "reconcileNativeBalance()": FunctionFragment;
    "recoverERC20(address,address,uint256)": FunctionFragment;
    "recoverNativeTokens(address)": FunctionFragment;
    "referralCodeBps(uint256)": FunctionFragment;
    "refund(uint256,address[])": FunctionFragment;
    "refundableBalanceOf(address)": FunctionFragment;
    "refundableTokenBalanceOfAll(address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardBalanceOf(address)": FunctionFragment;
    "rewardBps()": FunctionFragment;
    "rewardMultiplier()": FunctionFragment;
    "rewardPoolBalance()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setSupplyCap(uint256)": FunctionFragment;
    "setTransferRecipient(address)": FunctionFragment;
    "slashRewards(address)": FunctionFragment;
    "subscriptionOf(address)": FunctionFragment;
    "supplyDetail()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "timeValue(uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalCreatorEarnings()": FunctionFragment;
    "totalRewardPoints()": FunctionFragment;
    "tps()": FunctionFragment;
    "transferAllBalances()": FunctionFragment;
    "transferFees()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferRecipient()": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateFeeRecipient(address)": FunctionFragment;
    "updateMetadata(string,string)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawAndTransferFees()": FunctionFragment;
    "withdrawRewards()": FunctionFragment;
    "withdrawTo(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOwnership"
      | "approve"
      | "balanceOf"
      | "baseTokenURI"
      | "canRefund"
      | "contractURI"
      | "createReferralCode"
      | "creatorBalance"
      | "deleteReferralCode"
      | "erc20Address"
      | "feeBalance"
      | "feeSchedule"
      | "getApproved"
      | "grantTime"
      | "initialize"
      | "isApprovedForAll"
      | "minPurchaseSeconds"
      | "mint"
      | "mintFor"
      | "mintWithReferral"
      | "mintWithReferralFor"
      | "name"
      | "owner"
      | "ownerOf"
      | "pause"
      | "paused"
      | "pendingOwner"
      | "reconcileERC20Balance"
      | "reconcileNativeBalance"
      | "recoverERC20"
      | "recoverNativeTokens"
      | "referralCodeBps"
      | "refund"
      | "refundableBalanceOf"
      | "refundableTokenBalanceOfAll"
      | "renounceOwnership"
      | "rewardBalanceOf"
      | "rewardBps"
      | "rewardMultiplier"
      | "rewardPoolBalance"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setSupplyCap"
      | "setTransferRecipient"
      | "slashRewards"
      | "subscriptionOf"
      | "supplyDetail"
      | "supportsInterface"
      | "symbol"
      | "timeValue"
      | "tokenURI"
      | "totalCreatorEarnings"
      | "totalRewardPoints"
      | "tps"
      | "transferAllBalances"
      | "transferFees"
      | "transferFrom"
      | "transferOwnership"
      | "transferRecipient"
      | "unpause"
      | "updateFeeRecipient"
      | "updateMetadata"
      | "withdraw"
      | "withdrawAndTransferFees"
      | "withdrawRewards"
      | "withdrawTo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "baseTokenURI",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "canRefund", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createReferralCode",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleteReferralCode",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20Address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeSchedule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantTime",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [Shared.InitParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "minPurchaseSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "mintFor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithReferral",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithReferralFor",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reconcileERC20Balance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reconcileNativeBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverNativeTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "referralCodeBps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "refundableBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "refundableTokenBalanceOfAll",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "rewardBps", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPoolBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupplyCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "slashRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyDetail",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "timeValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCreatorEarnings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRewardPoints",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tps", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferAllBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateFeeRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMetadata",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawAndTransferFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRewards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdrawTo", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canRefund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createReferralCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteReferralCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPurchaseSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintWithReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWithReferralFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reconcileERC20Balance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reconcileNativeBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverNativeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralCodeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refundableBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundableTokenBalanceOfAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardBps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPoolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupplyCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyDetail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timeValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalCreatorEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRewardPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAllBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndTransferFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawTo", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "FeeAllocated(uint256)": EventFragment;
    "FeeCollectorChange(address,address)": EventFragment;
    "FeeTransfer(address,address,uint256)": EventFragment;
    "Grant(address,uint256,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferStarted(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Purchase(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "ReferralCreated(uint256,uint16)": EventFragment;
    "ReferralDestroyed(uint256)": EventFragment;
    "ReferralPayout(uint256,address,uint256,uint256)": EventFragment;
    "Refund(address,uint256,uint256,uint256)": EventFragment;
    "RefundTopUp(uint256)": EventFragment;
    "RewardPointsSlashed(address,address,uint256)": EventFragment;
    "RewardWithdraw(address,uint256)": EventFragment;
    "RewardsAllocated(uint256)": EventFragment;
    "SupplyCapChange(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "TransferRecipientChange(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeAllocated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeCollectorChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Grant"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Purchase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferralCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferralDestroyed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferralPayout"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Refund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefundTopUp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPointsSlashed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsAllocated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupplyCapChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferRecipientChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface FeeAllocatedEventObject {
  tokens: BigNumber;
}
export type FeeAllocatedEvent = TypedEvent<
  [BigNumber],
  FeeAllocatedEventObject
>;

export type FeeAllocatedEventFilter = TypedEventFilter<FeeAllocatedEvent>;

export interface FeeCollectorChangeEventObject {
  from: string;
  to: string;
}
export type FeeCollectorChangeEvent = TypedEvent<
  [string, string],
  FeeCollectorChangeEventObject
>;

export type FeeCollectorChangeEventFilter =
  TypedEventFilter<FeeCollectorChangeEvent>;

export interface FeeTransferEventObject {
  from: string;
  to: string;
  tokensTransferred: BigNumber;
}
export type FeeTransferEvent = TypedEvent<
  [string, string, BigNumber],
  FeeTransferEventObject
>;

export type FeeTransferEventFilter = TypedEventFilter<FeeTransferEvent>;

export interface GrantEventObject {
  account: string;
  tokenId: BigNumber;
  secondsGranted: BigNumber;
  expiresAt: BigNumber;
}
export type GrantEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  GrantEventObject
>;

export type GrantEventFilter = TypedEventFilter<GrantEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter =
  TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PurchaseEventObject {
  account: string;
  tokenId: BigNumber;
  tokensTransferred: BigNumber;
  timePurchased: BigNumber;
  rewardPoints: BigNumber;
  expiresAt: BigNumber;
}
export type PurchaseEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  PurchaseEventObject
>;

export type PurchaseEventFilter = TypedEventFilter<PurchaseEvent>;

export interface ReferralCreatedEventObject {
  id: BigNumber;
  rewardBps: number;
}
export type ReferralCreatedEvent = TypedEvent<
  [BigNumber, number],
  ReferralCreatedEventObject
>;

export type ReferralCreatedEventFilter = TypedEventFilter<ReferralCreatedEvent>;

export interface ReferralDestroyedEventObject {
  id: BigNumber;
}
export type ReferralDestroyedEvent = TypedEvent<
  [BigNumber],
  ReferralDestroyedEventObject
>;

export type ReferralDestroyedEventFilter =
  TypedEventFilter<ReferralDestroyedEvent>;

export interface ReferralPayoutEventObject {
  tokenId: BigNumber;
  referrer: string;
  referralId: BigNumber;
  rewardAmount: BigNumber;
}
export type ReferralPayoutEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  ReferralPayoutEventObject
>;

export type ReferralPayoutEventFilter = TypedEventFilter<ReferralPayoutEvent>;

export interface RefundEventObject {
  account: string;
  tokenId: BigNumber;
  tokensTransferred: BigNumber;
  timeReclaimed: BigNumber;
}
export type RefundEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  RefundEventObject
>;

export type RefundEventFilter = TypedEventFilter<RefundEvent>;

export interface RefundTopUpEventObject {
  tokensIn: BigNumber;
}
export type RefundTopUpEvent = TypedEvent<[BigNumber], RefundTopUpEventObject>;

export type RefundTopUpEventFilter = TypedEventFilter<RefundTopUpEvent>;

export interface RewardPointsSlashedEventObject {
  account: string;
  slasher: string;
  rewardPointsSlashed: BigNumber;
}
export type RewardPointsSlashedEvent = TypedEvent<
  [string, string, BigNumber],
  RewardPointsSlashedEventObject
>;

export type RewardPointsSlashedEventFilter =
  TypedEventFilter<RewardPointsSlashedEvent>;

export interface RewardWithdrawEventObject {
  account: string;
  tokensTransferred: BigNumber;
}
export type RewardWithdrawEvent = TypedEvent<
  [string, BigNumber],
  RewardWithdrawEventObject
>;

export type RewardWithdrawEventFilter = TypedEventFilter<RewardWithdrawEvent>;

export interface RewardsAllocatedEventObject {
  tokens: BigNumber;
}
export type RewardsAllocatedEvent = TypedEvent<
  [BigNumber],
  RewardsAllocatedEventObject
>;

export type RewardsAllocatedEventFilter =
  TypedEventFilter<RewardsAllocatedEvent>;

export interface SupplyCapChangeEventObject {
  supplyCap: BigNumber;
}
export type SupplyCapChangeEvent = TypedEvent<
  [BigNumber],
  SupplyCapChangeEventObject
>;

export type SupplyCapChangeEventFilter = TypedEventFilter<SupplyCapChangeEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface TransferRecipientChangeEventObject {
  recipient: string;
}
export type TransferRecipientChangeEvent = TypedEvent<
  [string],
  TransferRecipientChangeEventObject
>;

export type TransferRecipientChangeEventFilter =
  TypedEventFilter<TransferRecipientChangeEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawEventObject {
  account: string;
  tokensTransferred: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface SubscriptionTokenV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SubscriptionTokenV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numSeconds: BigNumber }>;

    baseTokenURI(
      overrides?: CallOverrides
    ): Promise<[string] & { uri: string }>;

    canRefund(
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<[boolean] & { refundable: boolean }>;

    contractURI(overrides?: CallOverrides): Promise<[string] & { uri: string }>;

    createReferralCode(
      code: BigNumberish,
      bps: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    creatorBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    deleteReferralCode(
      code: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    erc20Address(
      overrides?: CallOverrides
    ): Promise<[string] & { erc20: string }>;

    feeBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    feeSchedule(
      overrides?: CallOverrides
    ): Promise<[string, number] & { feeCollector: string; feeBps: number }>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantTime(
      accounts: string[],
      secondsToAdd: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initialize(
      params: Shared.InitParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    minPurchaseSeconds(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numSeconds: BigNumber }>;

    mint(
      numTokens: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    mintFor(
      account: string,
      numTokens: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    mintWithReferral(
      numTokens: BigNumberish,
      referralCode: BigNumberish,
      referrer: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    mintWithReferralFor(
      account: string,
      numTokens: BigNumberish,
      referralCode: BigNumberish,
      referrer: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    reconcileERC20Balance(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    reconcileNativeBalance(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    recoverERC20(
      tokenAddress: string,
      recipientAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    recoverNativeTokens(
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    referralCodeBps(
      code: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number] & { bps: number }>;

    refund(
      numTokensIn: BigNumberish,
      accounts: string[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    refundableBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numSeconds: BigNumber }>;

    refundableTokenBalanceOfAll(
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numTokens: BigNumber }>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rewardBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numTokens: BigNumber }>;

    rewardBps(overrides?: CallOverrides): Promise<[number] & { bps: number }>;

    rewardMultiplier(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { multiplier: BigNumber }>;

    rewardPoolBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numTokens: BigNumber }>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSupplyCap(
      supplyCap: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTransferRecipient(
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    slashRewards(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    subscriptionOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        tokenId: BigNumber;
        refundableAmount: BigNumber;
        rewardPoints: BigNumber;
        expiresAt: BigNumber;
      }
    >;

    supplyDetail(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { count: BigNumber; cap: BigNumber }>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    timeValue(
      numTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numSeconds: BigNumber }>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { uri: string }>;

    totalCreatorEarnings(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { total: BigNumber }>;

    totalRewardPoints(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numPoints: BigNumber }>;

    tps(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numTokens: BigNumber }>;

    transferAllBalances(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFees(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferRecipient(
      overrides?: CallOverrides
    ): Promise<[string] & { recipient: string }>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateFeeRecipient(
      newCollector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateMetadata(
      contractUri: string,
      tokenUri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawAndTransferFees(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawRewards(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawTo(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  baseTokenURI(overrides?: CallOverrides): Promise<string>;

  canRefund(accounts: string[], overrides?: CallOverrides): Promise<boolean>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  createReferralCode(
    code: BigNumberish,
    bps: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  creatorBalance(overrides?: CallOverrides): Promise<BigNumber>;

  deleteReferralCode(
    code: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  erc20Address(overrides?: CallOverrides): Promise<string>;

  feeBalance(overrides?: CallOverrides): Promise<BigNumber>;

  feeSchedule(
    overrides?: CallOverrides
  ): Promise<[string, number] & { feeCollector: string; feeBps: number }>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  grantTime(
    accounts: string[],
    secondsToAdd: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initialize(
    params: Shared.InitParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  minPurchaseSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    numTokens: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  mintFor(
    account: string,
    numTokens: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  mintWithReferral(
    numTokens: BigNumberish,
    referralCode: BigNumberish,
    referrer: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  mintWithReferralFor(
    account: string,
    numTokens: BigNumberish,
    referralCode: BigNumberish,
    referrer: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  reconcileERC20Balance(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  reconcileNativeBalance(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  recoverERC20(
    tokenAddress: string,
    recipientAddress: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  recoverNativeTokens(
    recipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  referralCodeBps(
    code: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  refund(
    numTokensIn: BigNumberish,
    accounts: string[],
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  refundableBalanceOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  refundableTokenBalanceOfAll(
    accounts: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rewardBalanceOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardBps(overrides?: CallOverrides): Promise<number>;

  rewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  rewardPoolBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSupplyCap(
    supplyCap: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTransferRecipient(
    recipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  slashRewards(
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  subscriptionOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      tokenId: BigNumber;
      refundableAmount: BigNumber;
      rewardPoints: BigNumber;
      expiresAt: BigNumber;
    }
  >;

  supplyDetail(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { count: BigNumber; cap: BigNumber }>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  timeValue(
    numTokens: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalCreatorEarnings(overrides?: CallOverrides): Promise<BigNumber>;

  totalRewardPoints(overrides?: CallOverrides): Promise<BigNumber>;

  tps(overrides?: CallOverrides): Promise<BigNumber>;

  transferAllBalances(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFees(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferRecipient(overrides?: CallOverrides): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateFeeRecipient(
    newCollector: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateMetadata(
    contractUri: string,
    tokenUri: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawAndTransferFees(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawRewards(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawTo(
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseTokenURI(overrides?: CallOverrides): Promise<string>;

    canRefund(accounts: string[], overrides?: CallOverrides): Promise<boolean>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    createReferralCode(
      code: BigNumberish,
      bps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    creatorBalance(overrides?: CallOverrides): Promise<BigNumber>;

    deleteReferralCode(
      code: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    erc20Address(overrides?: CallOverrides): Promise<string>;

    feeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    feeSchedule(
      overrides?: CallOverrides
    ): Promise<[string, number] & { feeCollector: string; feeBps: number }>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    grantTime(
      accounts: string[],
      secondsToAdd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      params: Shared.InitParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minPurchaseSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    mint(numTokens: BigNumberish, overrides?: CallOverrides): Promise<void>;

    mintFor(
      account: string,
      numTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintWithReferral(
      numTokens: BigNumberish,
      referralCode: BigNumberish,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mintWithReferralFor(
      account: string,
      numTokens: BigNumberish,
      referralCode: BigNumberish,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    reconcileERC20Balance(overrides?: CallOverrides): Promise<void>;

    reconcileNativeBalance(overrides?: CallOverrides): Promise<void>;

    recoverERC20(
      tokenAddress: string,
      recipientAddress: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverNativeTokens(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    referralCodeBps(
      code: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    refund(
      numTokensIn: BigNumberish,
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    refundableBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    refundableTokenBalanceOfAll(
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardBps(overrides?: CallOverrides): Promise<number>;

    rewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPoolBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setSupplyCap(
      supplyCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTransferRecipient(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    slashRewards(account: string, overrides?: CallOverrides): Promise<void>;

    subscriptionOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        tokenId: BigNumber;
        refundableAmount: BigNumber;
        rewardPoints: BigNumber;
        expiresAt: BigNumber;
      }
    >;

    supplyDetail(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { count: BigNumber; cap: BigNumber }>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    timeValue(
      numTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalCreatorEarnings(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewardPoints(overrides?: CallOverrides): Promise<BigNumber>;

    tps(overrides?: CallOverrides): Promise<BigNumber>;

    transferAllBalances(overrides?: CallOverrides): Promise<void>;

    transferFees(overrides?: CallOverrides): Promise<void>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferRecipient(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateFeeRecipient(
      newCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMetadata(
      contractUri: string,
      tokenUri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    withdrawAndTransferFees(overrides?: CallOverrides): Promise<void>;

    withdrawRewards(overrides?: CallOverrides): Promise<void>;

    withdrawTo(account: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "FeeAllocated(uint256)"(tokens?: null): FeeAllocatedEventFilter;
    FeeAllocated(tokens?: null): FeeAllocatedEventFilter;

    "FeeCollectorChange(address,address)"(
      from?: string | null,
      to?: string | null
    ): FeeCollectorChangeEventFilter;
    FeeCollectorChange(
      from?: string | null,
      to?: string | null
    ): FeeCollectorChangeEventFilter;

    "FeeTransfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokensTransferred?: null
    ): FeeTransferEventFilter;
    FeeTransfer(
      from?: string | null,
      to?: string | null,
      tokensTransferred?: null
    ): FeeTransferEventFilter;

    "Grant(address,uint256,uint256,uint256)"(
      account?: string | null,
      tokenId?: BigNumberish | null,
      secondsGranted?: null,
      expiresAt?: null
    ): GrantEventFilter;
    Grant(
      account?: string | null,
      tokenId?: BigNumberish | null,
      secondsGranted?: null,
      expiresAt?: null
    ): GrantEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferStarted(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Purchase(address,uint256,uint256,uint256,uint256,uint256)"(
      account?: string | null,
      tokenId?: BigNumberish | null,
      tokensTransferred?: null,
      timePurchased?: null,
      rewardPoints?: null,
      expiresAt?: null
    ): PurchaseEventFilter;
    Purchase(
      account?: string | null,
      tokenId?: BigNumberish | null,
      tokensTransferred?: null,
      timePurchased?: null,
      rewardPoints?: null,
      expiresAt?: null
    ): PurchaseEventFilter;

    "ReferralCreated(uint256,uint16)"(
      id?: null,
      rewardBps?: null
    ): ReferralCreatedEventFilter;
    ReferralCreated(id?: null, rewardBps?: null): ReferralCreatedEventFilter;

    "ReferralDestroyed(uint256)"(id?: null): ReferralDestroyedEventFilter;
    ReferralDestroyed(id?: null): ReferralDestroyedEventFilter;

    "ReferralPayout(uint256,address,uint256,uint256)"(
      tokenId?: BigNumberish | null,
      referrer?: string | null,
      referralId?: BigNumberish | null,
      rewardAmount?: null
    ): ReferralPayoutEventFilter;
    ReferralPayout(
      tokenId?: BigNumberish | null,
      referrer?: string | null,
      referralId?: BigNumberish | null,
      rewardAmount?: null
    ): ReferralPayoutEventFilter;

    "Refund(address,uint256,uint256,uint256)"(
      account?: string | null,
      tokenId?: BigNumberish | null,
      tokensTransferred?: null,
      timeReclaimed?: null
    ): RefundEventFilter;
    Refund(
      account?: string | null,
      tokenId?: BigNumberish | null,
      tokensTransferred?: null,
      timeReclaimed?: null
    ): RefundEventFilter;

    "RefundTopUp(uint256)"(tokensIn?: null): RefundTopUpEventFilter;
    RefundTopUp(tokensIn?: null): RefundTopUpEventFilter;

    "RewardPointsSlashed(address,address,uint256)"(
      account?: string | null,
      slasher?: string | null,
      rewardPointsSlashed?: null
    ): RewardPointsSlashedEventFilter;
    RewardPointsSlashed(
      account?: string | null,
      slasher?: string | null,
      rewardPointsSlashed?: null
    ): RewardPointsSlashedEventFilter;

    "RewardWithdraw(address,uint256)"(
      account?: string | null,
      tokensTransferred?: null
    ): RewardWithdrawEventFilter;
    RewardWithdraw(
      account?: string | null,
      tokensTransferred?: null
    ): RewardWithdrawEventFilter;

    "RewardsAllocated(uint256)"(tokens?: null): RewardsAllocatedEventFilter;
    RewardsAllocated(tokens?: null): RewardsAllocatedEventFilter;

    "SupplyCapChange(uint256)"(supplyCap?: null): SupplyCapChangeEventFilter;
    SupplyCapChange(supplyCap?: null): SupplyCapChangeEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;

    "TransferRecipientChange(address)"(
      recipient?: string | null
    ): TransferRecipientChangeEventFilter;
    TransferRecipientChange(
      recipient?: string | null
    ): TransferRecipientChangeEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Withdraw(address,uint256)"(
      account?: string | null,
      tokensTransferred?: null
    ): WithdrawEventFilter;
    Withdraw(
      account?: string | null,
      tokensTransferred?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseTokenURI(overrides?: CallOverrides): Promise<BigNumber>;

    canRefund(
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    createReferralCode(
      code: BigNumberish,
      bps: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    creatorBalance(overrides?: CallOverrides): Promise<BigNumber>;

    deleteReferralCode(
      code: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    erc20Address(overrides?: CallOverrides): Promise<BigNumber>;

    feeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    feeSchedule(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantTime(
      accounts: string[],
      secondsToAdd: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initialize(
      params: Shared.InitParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minPurchaseSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      numTokens: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    mintFor(
      account: string,
      numTokens: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    mintWithReferral(
      numTokens: BigNumberish,
      referralCode: BigNumberish,
      referrer: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    mintWithReferralFor(
      account: string,
      numTokens: BigNumberish,
      referralCode: BigNumberish,
      referrer: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    reconcileERC20Balance(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    reconcileNativeBalance(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: string,
      recipientAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    recoverNativeTokens(
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    referralCodeBps(
      code: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    refund(
      numTokensIn: BigNumberish,
      accounts: string[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    refundableBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    refundableTokenBalanceOfAll(
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rewardBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardBps(overrides?: CallOverrides): Promise<BigNumber>;

    rewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPoolBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSupplyCap(
      supplyCap: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setTransferRecipient(
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    slashRewards(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    subscriptionOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supplyDetail(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    timeValue(
      numTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalCreatorEarnings(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewardPoints(overrides?: CallOverrides): Promise<BigNumber>;

    tps(overrides?: CallOverrides): Promise<BigNumber>;

    transferAllBalances(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFees(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    updateFeeRecipient(
      newCollector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateMetadata(
      contractUri: string,
      tokenUri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdraw(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    withdrawAndTransferFees(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawRewards(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawTo(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseTokenURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canRefund(
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createReferralCode(
      code: BigNumberish,
      bps: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    creatorBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deleteReferralCode(
      code: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    erc20Address(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeSchedule(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantTime(
      accounts: string[],
      secondsToAdd: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initialize(
      params: Shared.InitParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minPurchaseSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      numTokens: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mintFor(
      account: string,
      numTokens: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mintWithReferral(
      numTokens: BigNumberish,
      referralCode: BigNumberish,
      referrer: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mintWithReferralFor(
      account: string,
      numTokens: BigNumberish,
      referralCode: BigNumberish,
      referrer: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reconcileERC20Balance(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    reconcileNativeBalance(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    recoverERC20(
      tokenAddress: string,
      recipientAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    recoverNativeTokens(
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    referralCodeBps(
      code: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    refund(
      numTokensIn: BigNumberish,
      accounts: string[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    refundableBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    refundableTokenBalanceOfAll(
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rewardBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPoolBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSupplyCap(
      supplyCap: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTransferRecipient(
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    slashRewards(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    subscriptionOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supplyDetail(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeValue(
      numTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalCreatorEarnings(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalRewardPoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferAllBalances(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFees(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateFeeRecipient(
      newCollector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateMetadata(
      contractUri: string,
      tokenUri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawAndTransferFees(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawRewards(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawTo(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
